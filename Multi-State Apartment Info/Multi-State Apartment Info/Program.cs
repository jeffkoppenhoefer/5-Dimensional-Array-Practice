using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Console;
using static System.Array;

namespace Multi_State_Apartment_Info
{
    class Program
    {
        
        //5D array for rent integer values for all complexes within each city and state. Commented, indented, and organized for easier navigation
        private static readonly int[,,,,] rents = new int[,,,,]
        { /*Ohio*/      {
                          /*Columbus*/{ 
                                        /*Warren Apartments*/ {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/679, /*2*/779, /*3*/899 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/779, /*2*/879, /*3*/999 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/879, /*2*/979, /*3*/1099 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/979, /*2*/1079, /*3*/1199 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1079, /*2*/1179, /*3*/1299 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1179, /*2*/1279, /*3*/1399 }
                                                              }, 

                                        /*Columbus Circle*/   {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/869, /*2*/969, /*3*/1050 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/969, /*2*/1069, /*3*/1150 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1250 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1350 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1450 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1369, /*2*/1469, /*3*/1550 }
                                                              },
                                        
                                        /*Superior Ink*/      {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/1009, /*2*/1059, /*3*/1109 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/1059, /*2*/1109, /*3*/1159 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1109, /*2*/1159, /*3*/1209 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1159, /*2*/1209, /*3*/1259 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1209, /*2*/1259, /*3*/1309 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1259, /*2*/1309, /*3*/1359 }
                                                              }
                                      },

                         /*Cleveland*/{
                                        /*Olympic Tower*/     {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/600, /*2*/700, /*3*/800 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/700, /*2*/800, /*3*/900 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/800, /*2*/900, /*3*/1000 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/900, /*2*/1000, /*3*/1100 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1000, /*2*/1100, /*3*/1200 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1200, /*2*/1300, /*3*/1400 }
                                                              }, 

                                        /*Trump SoHo*/        {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/719, /*2*/819, /*3*/919 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/819, /*2*/919, /*3*/1019 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/919, /*2*/1019, /*3*/1119 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1019, /*2*/1119, /*3*/1219 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1119, /*2*/1219, /*3*/1319 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1319, /*2*/1419, /*3*/1519 }
                                                              }, 

                                        /*HL23*/              {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/825, /*2*/925, /*3*/1025 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/925, /*2*/1025, /*3*/1125 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1025, /*2*/1125, /*3*/1225 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1125, /*2*/1225, /*3*/1325 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1225, /*2*/1325, /*3*/1425 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1425, /*2*/1525, /*3*/1625 }
                                                              }
                                      }, 

                        /*Cincinatti*/{
                                        /*The Rushmore*/     {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/539, /*2*/639, /*3*/739 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/639, /*2*/739, /*3*/839 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/739, /*2*/839, /*3*/939 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/839, /*2*/939, /*3*/1039 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/939, /*2*/1039, /*3*/1139 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1039, /*2*/1139, /*3*/1239 }
                                                             }, 

                                        /*The Sheffield*/    {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/649, /*2*/749, /*3*/849 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/749, /*2*/849, /*3*/949 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/849, /*2*/949, /*3*/1049 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/949, /*2*/1049, /*3*/1149 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1049, /*2*/1149, /*3*/1249 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1149, /*2*/1249, /*3*/1349 }
                                                             }, 

                                        /*The Setai*/        {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/789, /*2*/889, /*3*/989 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/889, /*2*/989, /*3*/1089 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/989, /*2*/1089, /*3*/1189 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1089, /*2*/1189, /*3*/1289 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1189, /*2*/1289, /*3*/1389 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1289, /*2*/1389, /*3*/1489 }
                                                             }
                                      }
                        },

          /*Kentucky*/  { 
                
                        /*Louisville*/{ 
                                          /*The Orion*/      { 
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/499, /*2*/599, /*3*/699 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/599, /*2*/699, /*3*/799 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/699, /*2*/799, /*3*/899 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/799, /*2*/899, /*3*/999 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/899, /*2*/999, /*3*/1099 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/999, /*2*/1099, /*3*/1199 }
                                                             }, 

                                          /*Liberty Green*/  { 
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/529, /*2*/629, /*3*/729 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/629, /*2*/729, /*3*/829 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/729, /*2*/829, /*3*/929 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/829, /*2*/929, /*3*/1029 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/929, /*2*/1029, /*3*/1129 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1029, /*2*/1129, /*3*/1229 }
                                                             }, 

                                          /*2280 FDB*/       {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/719, /*2*/819, /*3*/919 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/819, /*2*/919, /*3*/1019 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/919, /*2*/1019, /*3*/1119 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1019, /*2*/1119, /*3*/1219 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1119, /*2*/1219, /*3*/1319 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1219, /*2*/1319, /*3*/1419 }
                                                             }
                                      }, 

                        /*Lexington*/ { 
                                          /*5th on the Park*/{
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/458, /*2*/558, /*3*/658 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/558, /*2*/658, /*3*/758 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/658, /*2*/758, /*3*/858 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/758, /*2*/858, /*3*/958 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/858, /*2*/958, /*3*/1058 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/958, /*2*/1058, /*3*/1158 }
                                                             }, 

                                          /*88 Morningside*/ {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/679, /*2*/779, /*3*/879 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/779, /*2*/879, /*3*/979 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/879, /*2*/979, /*3*/1079 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/979, /*2*/1079, /*3*/1179 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1079, /*2*/1179, /*3*/1279 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1179, /*2*/1279, /*3*/1379 }
                                                             }, 

                                          /*One57*/          {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/809, /*2*/909, /*3*/1009 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/909, /*2*/1009, /*3*/1109 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1009, /*2*/1109, /*3*/1209 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1109, /*2*/1209, /*3*/1309 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1209, /*2*/1309, /*3*/1409 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1309, /*2*/1409, /*3*/1509 }
                                                             }
                                      }, 

                        /*Frankfort*/ { 
                                          /*14W14*/          {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/695, /*2*/795, /*3*/895 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/795, /*2*/895, /*3*/995 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/895, /*2*/995, /*3*/1095 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/995, /*2*/1095, /*3*/1195 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1095, /*2*/1195, /*3*/1295 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1195, /*2*/1295, /*3*/1395 }
                                                             }, 

                                          /*Jackson Square*/ {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/805, /*2*/905, /*3*/1005 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/905, /*2*/1005, /*3*/1105 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1005, /*2*/1105, /*3*/1205 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1105, /*2*/1205, /*3*/1305 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1205, /*2*/1305, /*3*/1405 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1305, /*2*/1405, /*3*/1505 }
                                                             }, 

                                          /*Flank*/          {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1269 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1369 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1469 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1369, /*2*/1469, /*3*/1569 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1469, /*2*/1569, /*3*/1669 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1569, /*2*/1669, /*3*/1769 }
                                                             }
                                      }
                        },

          /*Michigan*/  { 
                
                           /*Detroit*/{
                                        /*Unified Units*/    {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/659, /*2*/759, /*3*/869 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/759, /*2*/859, /*3*/969 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/859, /*2*/959, /*3*/1069 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/959, /*2*/1059, /*3*/1169 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1059, /*2*/1159, /*3*/1269 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1159, /*2*/1259, /*3*/1369 }
                                                             }, 

                                        /*United Units*/     {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/795, /*2*/895, /*3*/995 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/895, /*2*/995, /*3*/1095 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/995, /*2*/1095, /*3*/1195 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1095, /*2*/1195, /*3*/1295 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1195, /*2*/1295, /*3*/1395 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1295, /*2*/1395, /*3*/1495 }
                                                             }, 

                                        /*Luxury Landing*/   {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/889, /*2*/989, /*3*/1089 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/989, /*2*/1089, /*3*/1189 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1089, /*2*/1189, /*3*/1289 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1289, /*2*/1389, /*3*/1489 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1389, /*2*/1489, /*3*/1589 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1489, /*2*/1589, /*3*/1689 }
                                                             }
                                     },
                
                          /*Lansing*/{ 
                                        /*Home Sweet Homes*/ {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/438, /*2*/538, /*3*/638 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/538, /*2*/638, /*3*/738 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/638, /*2*/738, /*3*/838 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/738, /*2*/838, /*3*/938 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/838, /*2*/938, /*3*/1038 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/938, /*2*/1038, /*3*/1138 }
                                                             }, 

                                        /*Community Complex*/{
                                                               /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/599, /*2*/699, /*3*/799 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/699, /*2*/799, /*3*/899 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/799, /*2*/899, /*3*/999 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/899, /*2*/999, /*3*/1099 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/999, /*2*/1099, /*3*/1199 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1099, /*2*/1199, /*3*/1299 }
                                                             }, 

                                        /*Welcome Neighbors*/{
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/769, /*2*/869, /*3*/1069 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/869, /*2*/969, /*3*/1169 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/969, /*2*/1069, /*3*/1269 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1369 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1469 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1569 }
                                                             }
                                     }, 

                        /*Ann Arbor*/{ 
                                       /*Apartment Partners*/{
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/519, /*2*/619, /*3*/719 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/619, /*2*/719, /*3*/819 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/719, /*2*/819, /*3*/919 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/819, /*2*/919, /*3*/1019 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/919, /*2*/1019, /*3*/1119 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1019, /*2*/1119, /*3*/1219 }
                                                             }, 

                                     /*Partnered Apartments*/{
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/639, /*2*/739, /*3*/839 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/739, /*2*/839, /*3*/939 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/839, /*2*/939, /*3*/1039 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/939, /*2*/1039, /*3*/1139 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1039, /*2*/1139, /*3*/1239 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1139, /*2*/1239, /*3*/1339 }
                                                             }, 

                                        /*Apartners*/        {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/705, /*2*/805, /*3*/905 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/805, /*2*/905, /*3*/1005 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/905, /*2*/1005, /*3*/1105 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1005, /*2*/1105, /*3*/1205 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1105, /*2*/1205, /*3*/1305 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1205, /*2*/1305, /*3*/1405 }
                                                             }
                                     }
                        },

          /*Tennessee*/ { 

                        /*Nashville*/{ 
                    
                                       /*Neighborly Nest*/   {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/534, /*2*/634, /*3*/734 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/634, /*2*/734, /*3*/834 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/734, /*2*/834, /*3*/934 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/834, /*2*/934, /*3*/1034 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/934, /*2*/1034, /*3*/1134 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1034, /*2*/1134, /*3*/1234 }
                                                             }, 

                                       /*Nesting Neighbors*/ {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/559, /*2*/659, /*3*/869 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/659, /*2*/759, /*3*/969 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/759, /*2*/859, /*3*/1069 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/859, /*2*/959, /*3*/1169 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/959, /*2*/1059, /*3*/1269 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1059, /*2*/1259, /*3*/1369 }
                                                             }, 

                                       /*Luxury Landing*/    {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/649, /*2*/749, /*3*/849 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/749, /*2*/849, /*3*/949 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/849, /*2*/949, /*3*/1049 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/949, /*2*/1049, /*3*/1149 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1049, /*2*/1149, /*3*/1249 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1149, /*2*/1249, /*3*/1349 }
                                                             }

                                     }, 

                          /*Memphis*/{ 
                    
                                       /*With a View*/       {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/700, /*2*/800, /*3*/900 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/800, /*2*/900, /*3*/1000 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/900, /*2*/1000, /*3*/1100 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1000, /*2*/1100, /*3*/1200 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1100, /*2*/1200, /*3*/1300 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1200, /*2*/1300, /*3*/1400 }
                                                             }, 

                                       /*Mountain View*/     {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/879, /*2*/979, /*3*/1079 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/979, /*2*/1079, /*3*/1179 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1079, /*2*/1179, /*3*/1279 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1179, /*2*/1279, /*3*/1379 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1279, /*2*/1379, /*3*/1479 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1379, /*2*/1479, /*3*/1579 }
                                                             }, 

                                       /*Altitude*/          {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/969, /*2*/1069, /*3*/1169 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1269 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1369 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1469 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1369, /*2*/1469, /*3*/1569 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1469, /*2*/1569, /*3*/1669 }
                                                             }

                                     }, 

                        /*Knoxville*/{ 
                    
                                       /*Elevated*/          {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/629, /*2*/729, /*3*/829 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/729, /*2*/829, /*3*/929 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/829, /*2*/929, /*3*/1029 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/929, /*2*/1029, /*3*/1129 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1029, /*2*/1129, /*3*/1229 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1129, /*2*/1229, /*3*/1329 }
                                                             }, 

                                       /*Victory Villiage*/  {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/709, /*2*/809, /*3*/909 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/809, /*2*/909, /*3*/1009 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/909, /*2*/1009, /*3*/1109 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1009, /*2*/1109, /*3*/1209 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1109, /*2*/1209, /*3*/1309 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1209, /*2*/1309, /*3*/1409 }
                                                             }, 

                                       /*Villiage Voices*/   {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/789, /*2*/889, /*3*/1089 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/889, /*2*/989, /*3*/1189 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/989, /*2*/1089, /*3*/1289 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1089, /*2*/1189, /*3*/1389 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1189, /*2*/1289, /*3*/1489 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1289, /*2*/1389, /*3*/1589 }
                                                             }

                                     }

                        },

          /*Indiana*/   { 
                
                     /*Indianapolis*/{ 
                    
                                        /*The Pointe*/       {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/755, /*2*/855, /*3*/955 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/855, /*2*/955, /*3*/1055 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/955, /*2*/1055, /*3*/1155 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1055, /*2*/1155, /*3*/1255 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1155, /*2*/1255, /*3*/1355 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1255, /*2*/1355, /*3*/1455 }
                                                             },
                                        
                                        /*The Villiage*/     {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/769, /*2*/869, /*3*/1069 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/869, /*2*/969, /*3*/1169 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/969, /*2*/1069, /*3*/1269 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1369 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1469 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1569 }
                                                             }, 

                                        /*The Green*/        {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/875, /*2*/975, /*3*/1075 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/975, /*2*/1075, /*3*/1175 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1075, /*2*/1175, /*3*/1275 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1175, /*2*/1275, /*3*/1375 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1275, /*2*/1375, /*3*/1475 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1375, /*2*/1475, /*3*/1575 }
                                                             }

                                     }, 

                       /*Fort Wayne*/{ 
                    
                                       /*The Views*/         {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/519, /*2*/619, /*3*/819 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/619, /*2*/719, /*3*/919 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/719, /*2*/819, /*3*/1019 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/819, /*2*/919, /*3*/1119 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/919, /*2*/1019, /*3*/1219 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1019, /*2*/1219, /*3*/1319 }
                                                             }, 

                                       /*Greenspace*/        {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/629, /*2*/729, /*3*/829 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/729, /*2*/829, /*3*/929 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/829, /*2*/929, /*3*/1029 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/929, /*2*/1029, /*3*/1129 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1029, /*2*/1129, /*3*/1229 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1129, /*2*/1229, /*3*/1329 }
                                                             }, 

                                       /*The Oaks*/          {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/769, /*2*/869, /*3*/969 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/869, /*2*/969, /*3*/1069 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/969, /*2*/1069, /*3*/1169 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1269 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1369 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1469 }
                                                             }

                                     }, 

                      /*Bloomington*/{ 
                    
                                        /*Park Place*/       {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/979, /*2*/1079, /*3*/1179 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/1079, /*2*/1179, /*3*/1279 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1179, /*2*/1279, /*3*/1379 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1279, /*2*/1379, /*3*/1479 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1379, /*2*/1479, /*3*/1579 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1479, /*2*/1579, /*3*/1679 }
                                                             }, 

                                        /*Garden Square*/    {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/1069, /*2*/1169, /*3*/1269 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/1169, /*2*/1269, /*3*/1369 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1269, /*2*/1369, /*3*/1469 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1369, /*2*/1469, /*3*/1569 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1469, /*2*/1569, /*3*/1669 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1569, /*2*/1669, /*3*/1769 }
                                                             }, 

                                        /*The Nest*/         {
                                                                /*Floor:*/ /*0*/{ /*Beds:*/ /*1*/1189, /*2*/1289, /*3*/1389 }, 
                                                                           /*1*/{ /*Beds:*/ /*1*/1289, /*2*/1389, /*3*/1489 }, 
                                                                           /*2*/{ /*Beds:*/ /*1*/1389, /*2*/1489, /*3*/1589 }, 
                                                                           /*3*/{ /*Beds:*/ /*1*/1489, /*2*/1589, /*3*/1689 }, 
                                                                           /*4*/{ /*Beds:*/ /*1*/1589, /*2*/1689, /*3*/1789 }, 
                                                                           /*5*/{ /*Beds:*/ /*1*/1689, /*2*/1789, /*3*/1889 }
                                                             }

                                     }

                        }


        };


        //level one (array for states)
        private static readonly string[] lvl1 = new string[] { "Ohio", "Kentucky", "Michigan", "Tennessee", "Indiana" };

        //level two (arrays for all cities)
        private static readonly string[] lvl2OH = new string[] { "Columbus", "Cleveland", "Cincinatti" };
        private static readonly string[] lvl2KY = new string[] { "Louisville", "Lexington", "Frankfort" };
        private static readonly string[] lvl2MI = new string[] { "Detroit", "Lansing", "Ann Arbor" };
        private static readonly string[] lvl2TN = new string[] { "Nashville", "Memphis", "Knoxville" };
        private static readonly string[] lvl2IN = new string[] { "Indianapolis", "Fort Wayne", "Bloomington" };

        //level three (arrays for all apartment complexes within states/citites)

        //Ohio
        private static readonly string[] lvl3Cbus = new string[] {"Warren Apartments", "Columbus Circle", "Superior Ink"}; //Columbus
        private static readonly string[] lvl3Clvd = new string[] { "Olympic Tower", "Trump SoHo", "HL23" }; //Cleveland
        private static readonly string[] lvl3Cinci = new string[] { "The Rushmore", "The Sheffield", "The Setai" }; //Cincinatti
        //Kentucky
        private static readonly string[] lvl3Louis = new string[] { "The Orion", "Liberty Green", "2280 FDB" }; //Louisville
        private static readonly string[] lvl3Lex = new string[] { "5th on the Park", "88 Morningside", "One57" }; //Lexington
        private static readonly string[] lvl3Frank = new string[] { "14W14", "Jackson Square", "Flank" }; //Frankfort
        //Michigan
        private static readonly string[] lvl3Detr = new string[] { "Unified Units", "United Units", "Luxury Landing" }; //Detroit
        private static readonly string[] lvl3Lans = new string[] { "Home Sweet Home", "Community Complex", "Welcome Neighbors" }; //Lansing
        private static readonly string[] lvl3AnnAr = new string[] { "Apartment Partners", "Partnered Apartments", "Apartners" }; //Ann Arbor
        //Tennessee
        private static readonly string[] lvl3Nash = new string[] { "Neighborly Nest", "Nesting Neighbors", "Luxury Landing" }; //Nashville
        private static readonly string[] lvl3Memp = new string[] { "With a View", "Mountain View", "Altitude" }; //Memphis
        private static readonly string[] lvl3Knox = new string[] { "Elevated", "Victory Villiage", "Villiage Voices" }; //Knoxville
        //Indiana
        private static readonly string[] lvl3Indi = new string[] { "The Pointe", "The Villiage", "The Green" }; //Indianapolis
        private static readonly string[] lvl3Wayne = new string[] { "The Views", "Greenspace", "The Oaks" }; //Fort Wayne
        private static readonly string[] lvl3Bloom = new string[] { "Park Place", "Garden Square", "The Nest" }; //Bloominton

        //delcare and initialize program looping variables
        private static bool runAgain = false, checkLvl1 = false, checkLvl2 = false, checkLvl3 = false, checkLvl4 = false, checkLvl5 = false;
        private static string runAgainStr = "";

        //declare and initialize variables necessary to be created before calculations
        private static string input1 = "", input2 = "", input3 = "", complex = "", city = "";
        private static int lvl1Input = -1, lvl2Input = -1, lvl3Input = -1, rent = -1, input4 = -1, input5 = -1;



        //method to get all necessary info for final output
        private static void GetInfo()
        {

            //get desired state
            Write("\nEnter desired state \n(Ohio, Kentucky, Michigan, Tennessee, Indiana): ");
            input1 = ReadLine();


            //get index of desired state input by user
            foreach (string s in lvl1)
            {

                if (input1.Equals(s, StringComparison.OrdinalIgnoreCase))
                {

                    lvl1Input = IndexOf(lvl1, s);
                    checkLvl1 = true;

                } 
               
            } 

            //error check state input
            while(!checkLvl1)
            {

                Write("\nInvalid input. Enter desired state \n(Ohio, Kentucky, Michigan, Tennessee, Indiana): ");
                input1 = ReadLine();

                foreach (string s in lvl1)
                {

                    if (input1.Equals(s, StringComparison.OrdinalIgnoreCase))
                    {

                        lvl1Input = IndexOf(lvl1, s);
                        checkLvl1 = true;

                    }

                }

            }

            //begin calculations with multiple nested switch case statements
            switch (lvl1Input)
            {

                case 0: //Ohio

                    Write("\nEnter desired city \n(Columbus, Cleveland, Cincinatti): ");
                    input2 = ReadLine();
                    //get index of desired Ohio city
                    foreach (string s in lvl2OH)
                    {

                        if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                        {

                            lvl2Input = IndexOf(lvl2OH, s);
                            checkLvl2 = true;

                        } 

                    }
                    

                    //error check Ohio city input
                    while (!checkLvl2)
                    {

                        Write("\nInvalid input. Enter desired city \n(Columbus, Cleveland, Cincinatti): ");
                        input2 = ReadLine();

                        foreach (string s in lvl2OH)
                        {

                            if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                            {

                                lvl2Input = IndexOf(lvl2OH, s);
                                checkLvl2 = true;

                            }

                        }

                    }

                    //set city string for output
                    city = lvl2OH[lvl2Input];

                    //switch through city input by user
                    switch (lvl2Input)
                    {

                        case 0: //columbus

                            Write("\nEnter desired apartment complex \n(Warren Apartments, Columbus Circle, Superior Ink): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Columbus, OH
                            foreach (string s in lvl3Cbus)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Cbus, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Columbus complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Warren Apartments, Columbus Circle, Superior Ink): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Cbus)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Cbus, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }

                            //set complex string for output
                            complex = lvl3Cbus[lvl3Input];
                            break;

                        case 1: //cleveland

                            Write("\nEnter desired apartment complex \n(Olympic Tower, Trump SoHo, HL23): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Cleveland, OH
                            foreach (string s in lvl3Clvd)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Clvd, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Cleveland complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Olympic Tower, Trump SoHo, HL23): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Clvd)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Clvd, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }

                            //set complex string for output
                            complex = lvl3Clvd[lvl3Input];
                            break;

                        case 2: //cincinatti

                            Write("\nEnter desired apartment complex \n(The Rushmore, The Sheffield, The Setai): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Cincinatti, OH
                            foreach (string s in lvl3Cinci)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Cinci, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Cincinatti complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(The Rushmore, The Sheffield, The Setai): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Cinci)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Cinci, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }

                            //set complex string for output
                            complex = lvl3Cinci[lvl3Input];
                            break;

                    }
                    break;

                case 1: //Kentucky

                    Write("\nEnter desired city \n(Louisville, Lexington, Frankfort): ");
                    input2 = ReadLine();
                    //get index of desired Kentucky city
                    foreach (string s in lvl2KY)
                    {

                        if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                        {

                            lvl2Input = IndexOf(lvl2KY, s);
                            checkLvl2 = true;

                        }

                    }

                    //error check Kentucky city input
                    while (!checkLvl2)
                    {

                        Write("\nInvalid input. Enter desired city \n(Louisville, Lexington, Frankfort): ");
                        input2 = ReadLine();

                        foreach (string s in lvl2KY)
                        {

                            if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                            {

                                lvl2Input = IndexOf(lvl2KY, s);
                                checkLvl2 = true;

                            }

                        }

                    }

                    //set city string for output
                    city = lvl2KY[lvl2Input];
                    switch (lvl2Input)
                    {

                        case 0: //louisville

                            Write("\nEnter desired apartment complex \n(The Orion, Liberty Green, 2280 FDB): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Louisville, KY
                            foreach (string s in lvl3Louis)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Louis, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Louisville complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(The Orion, Liberty Green, 2280 FDB): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Louis)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Louis, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Louis[lvl3Input];
                            break;

                        case 1: //lexington

                            Write("\nEnter desired apartment complex \n(5th on the Park, 88 Morningside, One57): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Lexington, KY
                            foreach (string s in lvl3Lex)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Lex, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Lexington complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(5th on the Park, 88 Morningside, One57): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Lex)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Lex, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Lex[lvl3Input];
                            break;

                        case 2: //frankfort

                            Write("\nEnter desired apartment complex \n(14W14, Jackson Square, Flank): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Frankfort, KY
                            foreach (string s in lvl3Frank)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Frank, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Frankfort complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(14W14, Jackson Square, Flank): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Frank)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Frank, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Frank[lvl3Input];
                            break;

                    }
                    break;

                case 2: //Michigan

                    Write("\nEnter desired city \n(Detroit, Lansing, Ann Arbor): ");
                    input2 = ReadLine();
                    //get index of desired Michigan city
                    foreach (string s in lvl2MI)
                    {

                        if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                        {

                            lvl2Input = IndexOf(lvl2MI, s);
                            checkLvl2 = true;

                        }

                    }

                    //error check Michigan city input
                    while (!checkLvl2)
                    {

                        Write("\nInvald input. Enter desired city \n(Detroit, Lansing, Ann Arbor): ");
                        input2 = ReadLine();

                        foreach (string s in lvl2MI)
                        {

                            if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                            {

                                lvl2Input = IndexOf(lvl2MI, s);
                                checkLvl2 = true;

                            }

                        }

                    }

                    //set city string for output
                    city = lvl2MI[lvl2Input];

                    switch (lvl2Input)
                    {

                        case 0: //detroit

                            Write("\nEnter desired apartment complex \n(Unified Units, United Units, Luxury Landing): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Detroit, MI
                            foreach (string s in lvl3Detr)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Detr, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Detroit complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Unified Units, United Units, Luxury Landing): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Detr)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Detr, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Detr[lvl3Input];
                            break;

                        case 1: //lansing

                            Write("\nEnter desired apartment complex \n(Home Sweet Home, Community Complex, Welcome Neighbors): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Lansing, MI
                            foreach (string s in lvl3Lans)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Lans, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Lansing complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Home Sweet Home, Community Complex, Welcome Neighbors): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Lans)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Lans, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Lans[lvl3Input];
                            break;

                        case 2: //ann arbor
                            Write("\nEnter desired apartment complex \n(Apartment Partners, Partnered Apartments, Apartners): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Ann Arbor, MI
                            foreach (string s in lvl3AnnAr)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3AnnAr, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Ann Arbor complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Apartment Partners, Partnered Apartments, Apartners): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3AnnAr)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3AnnAr, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3AnnAr[lvl3Input];
                            break;

                    }
                    break;

                case 3: //Tennessee

                    Write("\nEnter desired city \n(Nashville, Memphis, Knoxville): ");
                    input2 = ReadLine();
                    //get index of desired Tennessee city
                    foreach (string s in lvl2TN)
                    {

                        if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                        {

                            lvl2Input = IndexOf(lvl2TN, s);
                            checkLvl2 = true;

                        }

                    }

                    //error check Tennessee city input
                    while (!checkLvl2)
                    {

                        Write("\nInvald input. Enter desired city \n(Nashville, Memphis, Knoxville): ");
                        input2 = ReadLine();

                        foreach (string s in lvl2TN)
                        {

                            if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                            {

                                lvl2Input = IndexOf(lvl2TN, s);
                                checkLvl2 = true;

                            }

                        }

                    }

                    //set city string for output
                    city = lvl2TN[lvl2Input];

                    switch (lvl2Input)
                    {

                        case 0: //nashville

                            Write("\nEnter desired apartment complex \n(Neighborly Nest, Nesting Neighbors, Luxury Landing): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Nashville, TN
                            foreach (string s in lvl3Nash)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Nash, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Nashville complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Neighborly Nest, Nesting Neighbors, Luxury Landing): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Nash)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Nash, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Nash[lvl3Input];
                            break;

                        case 1: //memphis

                            Write("\nEnter desired apartment complex \n(With a View, Mountain View, Altitude): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Memphis, TN
                            foreach (string s in lvl3Memp)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Memp, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Memphis complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(With a View, Mountain View, Altitude): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Memp)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Memp, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Memp[lvl3Input];
                            break;

                        case 2: //knoxville

                            Write("\nEnter desired apartment complex \n(Elevated, Victory Villiage, Villiage Voices): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Knoxville, TN
                            foreach (string s in lvl3Knox)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Knox, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Knoxville complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Elevated, Victory Villiage, Villiage Voices): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Knox)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Knox, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Knox[lvl3Input];
                            break;

                    }
                    break;

                case 4: //Indiana

                    Write("\nEnter desired city \n(Indiananapolis, Fort Wayne, Bloomington): ");
                    input2 = ReadLine();
                    //get index of desired Indiana city
                    foreach (string s in lvl2IN)
                    {

                        if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                        {

                            lvl2Input = IndexOf(lvl2IN, s);
                            checkLvl2 = true;

                        }

                    }

                    //error check Indiana city input
                    while (!checkLvl2)
                    {

                        Write("\nInvald input. Enter desired city \n(Indiananapolis, Fort Wayne, Bloomington): ");
                        input2 = ReadLine();

                        foreach (string s in lvl2IN)
                        {

                            if (input2.Equals(s, StringComparison.OrdinalIgnoreCase))
                            {

                                lvl2Input = IndexOf(lvl2IN, s);
                                checkLvl2 = true;

                            }

                        }

                    }

                    //set city string for output
                    city = lvl2IN[lvl2Input];

                    switch (lvl2Input)
                    {

                        case 0: //indianapolis

                            Write("\nEnter desired apartment complex \n(The Pointe, The Villiage, The Green): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Indianapolis, IN
                            foreach (string s in lvl3Indi)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Indi, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Indianapolis complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(The Pointe, The Villiage, The Green): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Indi)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Indi, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Indi[lvl3Input];
                            break;

                        case 1: //fort wayne

                            Write("\nEnter desired apartment complex \n(The Views, Greenspace, The Oaks): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Fort Wayne, IN
                            foreach (string s in lvl3Wayne)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Wayne, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Fort Wayne complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(The Views, Greenspace, The Oaks): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Wayne)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Wayne, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Wayne[lvl3Input];
                            break;

                        case 2: //bloomington

                            Write("\nEnter desired apartment complex \n(Park Place, Garden Square, The Nest): ");
                            input3 = ReadLine();
                            //get index of desired apartment complex in Bloomville, IN
                            foreach (string s in lvl3Bloom)
                            {

                                if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                {

                                    lvl3Input = IndexOf(lvl3Bloom, s);
                                    checkLvl3 = true;

                                }

                            }

                            //error check Bloomville complex input
                            while (!checkLvl3)
                            {

                                Write("\nInvalid input. Enter desired apartment complex \n(Park Place, Garden Square, The Nest): ");
                                input3 = ReadLine();

                                foreach (string s in lvl3Bloom)
                                {

                                    if (input3.Equals(s, StringComparison.OrdinalIgnoreCase))
                                    {

                                        lvl3Input = IndexOf(lvl3Bloom, s);
                                        checkLvl3 = true;

                                    }

                                }

                            }


                            //set complex string for output
                            complex = lvl3Bloom[lvl3Input];
                            break;

                    }
                    break;

            }

            //get desired floor number (indexed 0-5, user input 1-6)
            Write("\nEnter desired floor number (1-6): ");
            checkLvl4 = int.TryParse(ReadLine(), out input4);

            //subtract 1 for better user interface
            input4 -= 1;

            //error check floor number
            while(!checkLvl4 || input4 < 0 || input4 > 5)
            {

                Write("\nInvalid input. Enter desired floor number (1-6): ");
                checkLvl4 = int.TryParse(ReadLine(), out input4);
                input4 -= 1;

            }

            //get desired number of beds (indexed 0-2, user input 1-3)
            Write("\nEnter desired number of beds (1-3): ");
            checkLvl5 = int.TryParse(ReadLine(), out input5);

            //subtract 1 for better user interface
            input5 -= 1;

            //error check number of beds
            while(!checkLvl5 || input5 < 0 || input5 > 2)
            {

                Write("\nInvalid input. Enter desired number of beds (1-3): ");
                checkLvl5 = int.TryParse(ReadLine(), out input5);
                input5 -= 1;

            }

            //set rent value to a single integer within 5D array dependent upon user input
            rent = rents[lvl1Input, lvl2Input, lvl3Input, input4, input5];

        }

        static void Main(string[] args)
        {

            WriteLine("Multi-State Apartment Complex Rent Finder");

            do
            {

                GetInfo();
             
                //output final information to user
                WriteLine("\nRent for an apartment with {0} bed(s), on floor {1} of the '{2}' apartment complex,\nin {3}, {4} costs {5} per month."
                          , input5 + 1, input4 + 1, complex, city, lvl1[lvl1Input], rent.ToString("C"));

                //check to see if user wants to run the program again
                Write("\n\nRun another query? (y/n): ");
                runAgainStr = ReadLine();

                //error checking
                while(!runAgainStr.Equals("n", StringComparison.OrdinalIgnoreCase) && !runAgainStr.Equals("y", StringComparison.OrdinalIgnoreCase))
                {

                    Write("Invalid input. Run another query? (y/n): ");
                    runAgainStr = ReadLine();

                }

                //determine whether to close program or re-run
                if (runAgainStr.Equals("n", StringComparison.OrdinalIgnoreCase)) runAgain = false;
                else
                {
                    //reset all error check booleans
                    runAgain = true;
                    checkLvl1 = false;
                    checkLvl2 = false;
                    checkLvl3 = false;
                    checkLvl4 = false;
                    checkLvl5 = false;

                }
                

            } while (runAgain);

        }

    }
}
